# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog_info.ui'
#
# Created by: PySide2 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtCore import Qt, Signal, QTimer
from PySide2.QtGui import QPainter


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(300, 100)
        self.label_title = QtWidgets.QLabel(Form)
        self.label_title.setGeometry(QtCore.QRect(20, 4, 81, 21))
        self.label_title.setStyleSheet("font: 14pt \"楷体\";background-color: rgb(255, 255, 255);color: rgb(0, 0, 0);")
        self.label_title.setText("")
        self.label_title.setObjectName("label_title")
        self.label_info = QtWidgets.QLabel(Form)
        self.label_info.setGeometry(QtCore.QRect(20, 30, 271, 51))
        self.label_info.setStyleSheet("font: 14pt \"楷体\";background-color: rgb(255, 255, 255);color: rgb(0, 0, 0);")
        self.label_info.setText("")
        self.label_info.setObjectName("label_info")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))


class notification(QtWidgets.QMainWindow, Ui_Form):
    signal_back = Signal()

    def __init__(self, title, info):
        super(notification, self).__init__()
        self.setupUi(self)
        # self.setWindowFlags(Qt.FramelessWindowHint)
        self.setWindowFlags(Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.label_title.setText(title)
        self.label_info.setText(info)
        self.timer1 = QTimer()
        self.timer1.timeout.connect(self.close_all)
        self.timer1.start(1000)
        self.flag = 0
        self.show()

    def close_all(self):
        self.flag += 1
        if self.flag == 5:
            self.close()
            self.signal_back.emit()

    def paintEvent(self, event):
        # 圆角
        pat2 = QPainter(self)
        pat2.setRenderHint(pat2.Antialiasing)  # 抗锯齿
        pat2.setBrush(Qt.white)
        pat2.setPen(Qt.transparent)
        rect = self.rect()
        pat2.drawRoundedRect(rect, 15, 15)